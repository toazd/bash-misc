#!/usr/bin/env bash

# $1 parameter = user@host
# $2 parameter = remote path to search
# $3 parameter = checksum application (md5sum, sha256sum, sha512sum, etc.)

declare -a files=() checksums=()
declare ssh_string='ssh' \
        connect_to=${1:-'user@host'} \
        ciphers='chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com' \
        checksum=${3:-'sha512sum'} \
        base_path=${2:-'/tmp'} \
        time_start=0 \
        time_end=0 \
        i=0

FindFilesandChecksums()
{

    files=()
    checksums=()

    # Parse the output of find via ssh, adding each column element to its respective array
    time_start=$(date '+%s')
    while IFS= read -r || [[ -n $REPLY ]]
    do
        # Replace double forward-slash "//" with single forward-slash "/"
        files+=("${REPLY//'//'/'/'}")
        files+=("${REPLY##*[[:blank:]]}")
        checksums+=("${REPLY%%[[:blank:]]*}")
    done < <("$ssh_string" -c "$ciphers" "$connect_to" find "$base_path" -type f  -exec "$checksum" '{}' + \; 2>/dev/null | LC_ALL=C sort -fk2.3) #  | sed "s|$base_path||g"
    time_end=$(date '+%s')

    # Report
    printf '%s\n' "Found and sorted ${#files[@]} files and calculated ${#checksums[@]} checksums in $(( time_end - time_start )) seconds"

}

FindSortFiles()
{

    files=()

    # Parse the output of find via ssh, adding each column element to its respective array
    time_start=$(date '+%s')
    while IFS= read -r || [[ -n $REPLY ]]
    do
        # Replace double forward-slash "//" with single forward-slash "/"
        files+=("${REPLY//'//'/'/'}")
    done < <("$ssh_string" -c "$ciphers" "$connect_to" find "$base_path" -type f 2>/dev/null | LC_ALL=C sort -f) # ! -path '*.git*'
    time_end=$(date '+%s')

    # Report
    printf '%s\n' "Found and sorted ${#files[@]} files in $(( time_end - time_start )) seconds"

}

FindFiles()
{

    files=()

    # Parse the output of find via ssh, adding each column element to its respective array
    time_start=$(date '+%s')
    while IFS= read -r || [[ -n $REPLY ]]
    do
        # Remove base_path from the file names
        ##REPLY=${REPLY/#"/$base_path"}

        # Replace double forward-slash "//" with single forward-slash "/"
        files+=("${REPLY//'//'/'/'}")
        ##printf '%s\n' "${REPLY//'//'/'/'}" >> "findfiles_log"
    done < <("$ssh_string" -c "$ciphers" "$connect_to" find "$base_path/" -type f 2>/dev/null) # ! -path '*.git*'
    time_end=$(date '+%s')

    ##sort "findfiles_log" -o "findfiles_log"

    # Report
    printf '%s\n' "Found ${#files[@]} files using find in $(( time_end - time_start )) seconds"

}

FindFilesGlobstar() {

    files=()

    # Parse the output of find via ssh, adding each column element to its respective array
    time_start=$(date '+%s')
    while IFS= read -r || [[ -n $REPLY ]]
    do
        # Remove base_path from the file names
        ##REPLY=${REPLY/#"/$base_path"}

        # Replace double forward-slash "//" with single forward-slash "/"
        files+=("${REPLY//'//'/'/'}")
        ##printf '%s\n' "${REPLY//'//'/'/'}" >> "globstar_log"
    done < <("$ssh_string" -c "$ciphers" "$connect_to" bash -s <<EOF
#!/usr/bin/env bash
shopt -s globstar dotglob nullglob
for i in "$base_path/"**
do
[[ ! -f \$i || -L \$i || -h \$i || \$i -ef "$base_path" ]] && continue
printf '%s\n' "\$i"
done
EOF
)
    time_end=$(date '+%s')

    ##sort "globstar_log" -o "globstar_log"

    # Report
    printf '%s\n' "Found ${#files[@]} files using globstar in $(( time_end - time_start )) seconds"

}

PrintChecksumsFiles()
{

    # List each element of each array in a similar format to {md,sha}*sum
    for i in "${!files[@]}"
    do
        printf '%s  %s\n' "${checksums[i]}" "${files[i]}" # "${checksums[i]/#$base_path}" "${files[i]/#$base_path}"
    done

}

PrintFiles()
{

    # List each element of each array in a similar format to {md,sha}*sum
    for i in "${!files[@]}"
    do
        printf '%s\n' "${files[i]}" # "${files[i]/#$base_path}"
    done

}

QueryHostCiphers()
{

    opts=(cipher cipher-auth mac kex key key-cert key-plain key-sig sig)
    for option in "${opts[@]}"
    do
        printf '\n%s\n' "$option:"
        "$ssh_string" -Q "$option" "$connect_to"
    done

}

##QueryHostCiphers
##FindFilesandChecksums
##ListAllFiles

##FindSortFiles
##FindFiles
##FindSortFiles
##PrintFiles

FindFilesGlobstar
##PrintFiles
FindFiles
##PrintFiles

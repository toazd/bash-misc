#!/usr/bin/env bash
# vim: set ft=shell nowrap expandtab shiftwidth=4 tabstop=4 smarttab softtabstop=0
###############################################################################
#                                                                             #
# Toazd 2020 Unlicense https://unlicense.org/                                 #
#                                                                             #
#  dedup <file> ...                                                           #
#   De-duplicate the specified file(s) based on line content delimited by     #
#   newlines preserving the original order. Optionally, empty lines may be    #
#   preserved (default), removed, or de-duplicated.                           #
#                                                                             #
#   If ignore_empty=1 empty lines will be preserved (default: 1)              #
#   If remove_empty=1 all empty lines will be removed (default: 0)            #
#   NOTE: remove_empty=1 has no effect if ignore_empty=1                      #
#                                                                             #
#   If processing is successful the source file will be renamed with a ~      #
#   suffix and the de-duplicated file will be moved from /tmp to the original #
#   source file path and name.                                                #
#                                                                             #
###############################################################################

declare file_in element file_out
declare -a unique_list
declare -i i=0 lines_in=0 progress=0 prev_progress=1
declare -i ignore_empty=1 # 1 = Ignore (preserve) empty lines, 0 = Do not ignore empty lines
declare -i remove_empty=1 # 1 = Remove all empty lines, 0 = De-duplicate empty lines
                           # NOTE: Has no effect if ignore_empty=1

# No parameters, show usage
(( $# < 1 )) && { echo "${0##*/} <file> ..."; exit 1; }

# ignore_empty and remove_empty must be either 1 or 0
if (( ignore_empty < 0 || ignore_empty > 1 )) || (( remove_empty < 0 || remove_empty > 1 )); then
    echo "Invalid value(s) for ignore_empty ($ignore_empty) or remove_empty ($ignore_empty)"
    exit 1
fi

# Report how empty lines will be treated
if (( ignore_empty == 1 )); then
    echo "Empty lines will be preserved"
elif (( ignore_empty == 0 )); then
    if (( remove_empty == 1 )); then
        echo "All empty lines will be removed"
    elif (( remove_empty == 0 )); then
        echo "Empty lines will be de-duplicated"
    fi
fi

# Begin looping over positional parameters
while [[ $1 ]]; do

    # If the parameter is not a file or the script cannot read from it
    [[ ! -f $1 || ! -r $1 ]] && {
        echo "Unable to process $1 (not a file or no read access)"
        shift
        continue
    }

    # Reset variables for each file
    file_in=$1
    file_out=$(mktemp -q --tmpdir "${0##*/}-${file_in##*/}-$$"-tmp.XXXXXXXXXX)
    lines_in=$(wc -l < "$file_in" 2>/dev/null)
    i=0
    unique_list=()

    # If the specified file has 0 or 1 line(s) it cannot/doesn't need to be processed
    if (( lines_in <= 1 )); then
        echo "Unable to process $file_in (lines: $lines_in)"
        shift
        continue
    fi

    # If SIGINT (Ctrl-C) while processing, remove the current, partially processed temp file
    trap 'printf "\r\033[0K" 1>&2; rm -vf "$file_out" 1>&2; exit' INT

    # Print a report of what's being worked on next and save the cursor position
    printf '%s\n%s\n%s\033[s' "Input: $file_in" "Temp: $file_out" "Processing $file_in"
    while IFS= read -r --; do

        # Increment total line counter
        ((i++))

        # Update the current progress in %
        progress=$(( ( i * 100 ) / lines_in ))
        # Print progress only when it changes
        (( progress != prev_progress )) && printf '\033[u\033[s%s' "...$progress%" 1>&2
        prev_progress=$progress

        # If ignore_empty = 0 then check remove_empty
        if (( ignore_empty == 0 )); then
            # If remove_empty = 0 and this line is blank, skip to the next line
            if (( remove_empty == 1 )) && [[ -z $REPLY ]]; then
                continue
            fi
        fi

        # Search each element of the unique list array
        for element in "${unique_list[@]}"; do

            # If this line is not empty, check if it's a duplicate
            if [[ -n $REPLY ]]; then
                # If this line is a duplicate, skip to the next line
                [[ $REPLY = "$element" ]] && continue 2
            # The line is empty
            else
                # If we are ignoring (preserving) blanks, break
                if (( ignore_empty == 1 )); then
                    break
                # If we are not ignoring blanks, check if it's a duplicate
                elif (( ignore_empty == 0 )); then
                    # If this line is a duplicate, skip to the next line
                    [[ $REPLY = "$element" ]] && continue 2
                fi
            fi
        done

        # Add to the unique list
        unique_list+=("$REPLY")

        # Don't print a trailing newline unless the source file contained one
        if (( i != lines_in )); then
            printf '%s\n' "$REPLY" 2>/dev/null
        else
            printf '%s' "$REPLY" 2>/dev/null
        fi

    done < "$file_in" > "$file_out"

    # If lines processed is >0
    ((i)) && {
        printf '\r\033[0K%s\n' "${#unique_list[@]} out of $i lines are unique, $(( i - ${#unique_list[@]} )) lines removed"

        # If more than 0 lines were removed, backup the source file
        # and replace the original with the temp file
        if (( $(( i - ${#unique_list[@]} )) > 0 )); then
            if mv -v "$file_in" "$file_in"~; then
                mv -v "$file_out" "$file_in"
            fi
        # If no lines were removed, remove the temp file
        else
            rm -v "$file_out"
        fi
    }

    # shift positional parameters to process the next file
    shift
done

#!/usr/bin/env bash
#

# main configuration
country="US" # US|DE
mirror_status="on" # on|off
protocol="&protocol=https" # &protocol=http
ip_version="&ip_version=4" # &ip_version=6

# Requirements (curl, bc, write access to /etc/pacman.d/)
if (( $(id -u) != 0 ))
then
    printf '%s\n' "root required"
    exit 1
else
    ! command -v curl >/dev/null && {
        printf '%s\n' "curl required"
        exit 2
    }
    ! command -v bc >/dev/null && {
        printf '%s\n' "bc required"
        exit 3
    }
fi

# Remove temp files on exit
CleanUp() {
    rm -f "$tmp_file" >/dev/null
}
trap 'CleanUp' EXIT

#mirrorlist_url='https://www.archlinux.org/mirrorlist/?country=CA&country=DE&country=IE&country=GB&country=US&protocol=http&protocol=https&ip_version=4&use_mirror_status=on'
mirrorlist_url="https://www.archlinux.org/mirrorlist/?country=${country}${protocol}${ip_version}&use_mirror_status=${mirror_status}"
connect_timeout=3
max_time=5
tmp_file=/tmp/mirrorlist-update-"$(date '+%s')".tmp
flag_header_found=0
count_lines=0
valid_hosts=0
failed_hosts=0
response=()

printf '%s\033[s' "Checking each host..."
while IFS= read -r
do
    # update valid/failed hosts count during processing
    (( count_lines >= 1 )) && {
        printf '\033[u\033[s%s' " $valid_hosts/$failed_hosts" >&2
    }

    (( count_lines++ ))

    # "Header" used to validate input lines
    [[ $REPLY == '## Arch Linux repository mirrorlist'* || $REPLY == '## Filtered by'* || $REPLY == '## Generated on'* ]] && {
        (( flag_header_found++ ))
        if [[ $REPLY == '## Generated on'* ]]
        then
            printf '%s %s %s\n' "$REPLY" "at $(date '+%T')" "by ${0//*'/'}"
            printf '%s\n' "## $mirrorlist_url" # NOTE: this adds a 4th line to the "header"
        else
            printf '%s\n' "$REPLY"
        fi
    }

    # Ignore these servers
    [[ $REPLY == *'zxcvfdsa.com'* ]] && {
        (( failed_hosts++ ))
        continue
    }

    [[ $flag_header_found -ge 1 && $REPLY == '#Server'* ]] && {

        # Un-comment the host line
        REPLY=${REPLY/#'#Server'/Server}

        # Get the hostname to query
        host_name=${REPLY#*://}
        host_name=${host_name%%/*}

        # use curl to get a round trip time and http code response from the host
        # and save the results in an array
        # shellcheck disable=SC2207
        IFS=' ' response=( $(curl -s --connect-timeout "$connect_timeout" -m "$max_time" -w "%{time_total} %{http_code}" "https://${host_name}" -o /dev/null 2>/dev/null) )
        #printf '%s responded %s in %ss\n' "$host_name" "${response[1]}" "${response[0]}" >&2 # NOTE: not compatible with live count update

        if (( response[1] >= 400 || ! response[1] ))
        then
            (( failed_hosts++ ))
            printf '%s\n' "# $host_name returned http code ${response[1]} in ${response[0]}s"
            continue
        elif (( response[1] <= 400 ))
        then
            # Ignore hosts with round trips times greater than
            if (( $(bc <<< "${response[0]} > 0.650") ))
            then
                (( failed_hosts++ ))
            else
                (( valid_hosts++ ))
                printf '%s\n' "$REPLY"
            fi
        fi
    }
done < <(curl -sL "$mirrorlist_url" 2>/dev/null) > "$tmp_file"

# If at least one host is found and all three "headers" were found (validate the response)
if (( count_lines >= 5 && flag_header_found == 3 ))
then
    printf '\r\033[0K%s\n' "$valid_hosts succeeded | $failed_hosts failed "
    # If a mirrorlist or backup already exists, keep two backups
    [[ -f /etc/pacman.d/mirrorlist ]] && {
        [[ -f '/etc/pacman.d/mirrorlist~' ]] && mv -f '/etc/pacman.d/mirrorlist~' '/etc/pacman.d/mirrorlist~~'
        mv -f "/etc/pacman.d/mirrorlist" "/etc/pacman.d/mirrorlist~"
    }

    if mv -f "$tmp_file" "/etc/pacman.d/mirrorlist"
    then
        printf '%s\n' "Successfully updated mirrorlist"
    else
        printf '%s\n' "Failed to move $tmp_file to /etc/pacman.d/mirrorlist"
    fi
else
    printf '\r\033[0K%s\n' "Not enough valid responses. No changes were made."
fi

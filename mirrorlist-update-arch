#!/usr/bin/env bash

(( $(id -u) != 0 )) && echo "Root required" && exit 1

CleanUp() {
    rm -f "$tmp_file" 2>/dev/null 1>&2
}

trap 'CleanUp' EXIT

! command -v curl 2>/dev/null 1>&2 && echo "curl required" && exit 1

country=US
ip_version=4 # a second ip_version option must be added to support ipv6 (eg. &ip_version=6)
protocol=https # a second protocol option must be added to support http (eg. &protocol=http)
use_mirror_status=on
tmp_file=/tmp/"$(basename "$0")"-"$(date '+%s')".tmp
flag_header_found=0
count_lines=0

while IFS= read -r
do
    count_lines=$(( count_lines + 1 ))
    
    [[ $REPLY == '## Arch Linux repository mirrorlist'* || $REPLY == '## Filtered by'* || $REPLY == '## Generated on'* ]] && {
        flag_header_found=$((flag_header_found+1))
        echo "$REPLY"
    }
    
    [[ $REPLY == '#Server'* && $flag_header_found -ge 1 ]] && {
        # Un-comment the host line
        REPLY=${REPLY/#'#Server'/Server}
        echo "$REPLY"
    }
done < <(curl -sL "https://www.archlinux.org/mirrorlist/?country=${country}&protocol=${protocol}&ip_version=${ip_version}&use_mirror_status=$use_mirror_status" 2>/dev/null) > "$tmp_file"

# If at least one host is found and all three "headers" were found (validate the response)
if (( count_lines >= 4 && flag_header_found == 3 ))
then
    echo "$count_lines lines processed from curl"
    [[ -f /etc/pacman.d/mirrorlist ]] && mv -fv "/etc/pacman.d/mirrorlist" "/etc/pacman.d/mirrorlist~"

    if mv -fv "$tmp_file" "/etc/pacman.d/mirrorlist"
    then
        echo "Successfully updated mirrorlist"
    else
        echo "Failed to move $tmp_file to /etc/pacman.d/mirrorlist"
    fi
else
    echo "Not enough valid responses. No changes were made."
fi

# Rank based on response time
#        [[ $REPLY == *'https'* ]] && {
#            # Get only the host name
#            host=${REPLY#*https://}
#            host=${host%%/*}
#            IFS=' ' read -ra response "$(curl -silent --max-response 2 -w "%{time_total} "$host" -o /dev/null)"
#            if (( response[1] >= 400 || ! response[1] ))
#            then
#                #echo "unreachable"
#                continue
#            elif (( response[1] <= 400 ))
#            then
#                echo "$REPLY # ${response[0]}"
#            fi
#        }


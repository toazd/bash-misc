#!/usr/bin/env bash
# vim:set ft=shell nowrap et sta shiftwidth=4 ts=8 sts=0
#
#############
## Purpose ##
#############
#
# Parse /proc/stat for aggregate cpu usage and report it in %
#
###############
## Reference ##
###############
#
# https://stackoverflow.com/questions/23367857/accurate-calculation-of-cpu-usage-given-in-percentage-in-linux
#
# https://man7.org/linux/man-pages/man5/proc.5.html
#
# https://www.kernel.org/doc/Documentation/filesystems/proc.txt
#
#  f0    f1    f2      f3    f4      f5   f6       f7     f8     f9
#  user  nice  system  idle  iowait  irq  softirq  steal  guest  guest_nice extra

set -huo pipefail

PrintAggregateCPUUsagePercent() {

    local bash_only=1                       # 1=[use only bash arithmatic) 0=[use bc]
    local printf_scale=1                    # If bc is used, how many decimal places to show
    local printf_minwidth=3                 # Minimum width for printf field, padded with leading spaces (NOTE GNU printf does not support min width modifier for %s)
    local bc_scale=$(( printf_scale + 1 ))  # bc_scale must be one higher than printf_scale for rounding
    local num_samples=4                     # total_avg = tally / ( num_samples - 1 )
    local sample_period_seconds="0.25"      # Time in seconds to sleep between iterations
    local print_newline=1                   # 1=[Print a newline after n%] 0=[Do not print a newline after n%]
    local tally=0                           # Cumulative average
    local total_avg=0                       # Final cumulative average divided by number of samples
    local idle=0
    local prev_idle=0
    local busy=0
    local total=0
    local prev_total=0
    local delta_total=0
    local delta_idle=0
    local label
    local usage_percent=0
    local f{0..7}=0
    local xtra

    (( num_samples < 1 )) && num_samples=1 # num_samples must be > 0
    for (( i=0; i <= ( num_samples + 1 ); i++ )); do
        while IFS=' ' read -r label f0 f1 f2 f3 f4 f5 f6 f7 xtra; do
            case $label in
                (cpu)
                    idle=$(( f3 + f4 ))
                    busy=$(( f0 + f1 + f2 + f5 + f6 + f7 ))
                    total=$(( idle + busy ))

                    delta_total=$(( total - prev_total ))
                    delta_idle=$(( idle - prev_idle ))

                    # Skip the first iteration
                    (( i )) && {
                        if (( bash_only )); then
                            usage_percent=$(( (delta_total - delta_idle) * 100 / delta_total ))
                            (( i > 1 )) && tally=$(( tally + usage_percent ))
                        else
                            usage_percent=$( bc -l <<< "scale=$bc_scale; (($delta_total - $delta_idle) *100) / $delta_total" )
                            (( i > 1 )) && tally=$( bc -l <<< "scale=$bc_scale; ($tally + $usage_percent)" )
                        fi
                    }

                    #(( i > 1 )) && echo "($((i-1))) usage: $usage_percent tally: $tally" # For debug and double-checking results

                    prev_idle=$idle
                    prev_total=$total

                    sleep "$sample_period_seconds"s
                ;;
            esac
        done < /proc/stat
    done

    (( i == ( num_samples + 2 ) )) && {
        if (( bash_only )); then
            total_avg=$(( tally / num_samples ))
            if (( total_avg )); then
                if (( print_newline )); then
                    echo "${total_avg}%"
                else
                    printf '%s' "${total_avg}%"
                fi
            else
                if (( print_newline )); then
                    echo "<1%"
                else
                    printf '%s' "<1%"
                fi
            fi
        else
            total_avg=$( bc -l <<< "scale=$bc_scale; ($tally / $num_samples)" )
            total_avg=$( printf "%${printf_minwidth}.${printf_scale}f" "$total_avg" )
            if (( print_newline )); then
                echo "${total_avg/%.0}%"
            else
                printf '%s' "${total_avg/%.0}%"
            fi
        fi
    }
}

PrintAggregateCPUUsagePercent

